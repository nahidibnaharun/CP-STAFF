#include<bits/stdc++.h>
using namespace std;
using ll = long long;
/*
ID: mdnahidibnaharun
LANG: C++
TASK: practice 
*/
struct Cow {
    int x, y, index;
};
int main(){
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    // freopen("measurement.in", "r", stdin); 
    // freopen("measurement.out", "w", stdout); 
    int n;
    cin >> n;

    vector<Cow> northCows, eastCows;
    
    for (int i = 0; i < n; i++) {
        char direction;
        int x, y;
        cin >> direction >> x >> y;

        if (direction == 'N') {
            northCows.push_back({x, y, i});
        } else {
            eastCows.push_back({x, y, i});
        }
    }

    sort(northCows.begin(), northCows.end(), [](Cow a, Cow b) { return a.x < b.x; });
    sort(eastCows.begin(), eastCows.end(), [](Cow a, Cow b) { return a.y < b.y; });

    vector<int> stopPosition(n, -1);

    for (const Cow &ncow : northCows) {
        for (const Cow &ecow : eastCows) {
            if (ncow.x > ecow.x && ncow.y < ecow.y) {
                int northDistance = ecow.y - ncow.y;
                int eastDistance = ncow.x - ecow.x;

                if (northDistance < eastDistance && stopPosition[ecow.index] == -1) {
                    stopPosition[ecow.index] = ncow.x;
                }

                if (northDistance > eastDistance && stopPosition[ecow.index] == -1) {
                    stopPosition[ncow.index] = ecow.y;
                    break; 
                }
            }
        }
    }

    vector<int> distance(n, -1);

    for (const Cow &ncow : northCows) {
        if (stopPosition[ncow.index] != -1) {
            distance[ncow.index] = stopPosition[ncow.index] - ncow.y;
        }
    }

    for (const Cow &ecow : eastCows) {
        if (stopPosition[ecow.index] != -1) {
            distance[ecow.index] = stopPosition[ecow.index] - ecow.x;
        }
    }

    for (int d : distance) {
        if (d == -1) {
            cout << "Infinity\n";
        } else {
            cout << d << '\n';
        }
    }
	return 0;
}
