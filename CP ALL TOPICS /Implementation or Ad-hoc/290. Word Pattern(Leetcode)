class Solution {
public:
    bool wordPattern(string pattern, string s) {
        istringstream iss(s);
        vector<string>words;
        string w;
        while(iss >>w)words.push_back(w);
        if(words.size() != pattern.size())return false;

        unordered_map<char,string> p2w;
        unordered_map<string,char>w2p;

        for(int i=0;i<pattern.size();i++){
            char c= pattern[i];
            string &word = words[i];

            if(p2w.count(c)){
                if(p2w[c]!=word)return false;
            }
            else{
                if(w2p.count(word))return false;
                p2w[c]=word;
                w2p[word]=c;
            }
        }
        return true;
    }
};
