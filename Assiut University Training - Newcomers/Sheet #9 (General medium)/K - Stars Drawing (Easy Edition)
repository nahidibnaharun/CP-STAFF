#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
using ui = unsigned int;
const int MOD = (int)(1e9) + 7;
const int MAX = 1e7 + 5;
/*
//      _   __  ___  __   __ _______ _______
//     / | / / / _ \ \ \__\ \\__  __\\  __  \ 
//    /  |/ / / /_\ \ \  ___ \  \ \   \ \ \  \ 
//   / /|  / / ____  \ \ \  \ \ _\ \___\ \/  /
//  /_/ |_/ /_/    \__\ \_\  \_\\______\\___/

ID: mdnahidibnaharun
LANG: C++
TASK: practice 
*/

void solve(){
    int n, m;
    cin >> n >> m;
    vector<string> grid(n);
    for(auto &x : grid ) cin >> x;

    vector<tuple<int, int, int>> stars;

    vector<vector<bool>> covered(n, vector<bool>(m, false));

    auto canPlaceStar = [&](int i, int j, int s) -> bool {
        if (grid[i][j] != '*') return false;
        for (int d = 1; d <= s; ++d) {
            if (i - d < 0 || i + d >= n || j - d < 0 || j + d >= m) return false;
            if (grid[i - d][j] != '*' || grid[i + d][j] != '*' ||
                grid[i][j - d] != '*' || grid[i][j + d] != '*') {
                return false;
            }
        }
        return true;
    };

    for (int i = 1; i < n - 1; ++i) {
        for (int j = 1; j < m - 1; ++j) {
            int max_size = 0;
            while (canPlaceStar(i, j, max_size + 1)) {
                max_size++;
            }
            if (max_size > 0) {
                stars.push_back({i+1, j+1, max_size});  
                for (int d = 0; d <= max_size; ++d) {
                    covered[i - d][j] = true;
                    covered[i + d][j] = true;
                    covered[i][j - d] = true;
                    covered[i][j + d] = true;
                }
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (grid[i][j] == '*' && !covered[i][j]) {
                cout << -1 << endl;
                return;
            }
        }
    }
    cout << stars.size() << endl;
    for (const auto& star : stars) {
        cout << get<0>(star) << " " << get<1>(star) << " " << get<2>(star) << endl;
    }
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // ll t;cin>>t;
    // while(t--){
        solve();
    //     cout<<endl;
    // }
return 0;
}
