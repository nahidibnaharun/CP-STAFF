#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
const int INF=1000000000;

/*
//      _   __  ___  __   __ _______ _______
//     / | / / / _ \ \ \__\ \\__  __\\  __  \ 
//    /  |/ / / /_\ \ \  ___ \  \ \   \ \ \  \ 
//   / /|  / / ____  \ \ \  \ \ _\ \___\ \/  /
//  /_/ |_/ /_/    \__\ \_\  \_\\______\\___/

ID: mdnahidibnaharun
LANG: C++
TASK: practice 
*/
int n;
vector<int>l,r;
// CHANGE THIS LINE: from vector<vector<int>>g,dp;
vector<vector<int>>g; // 'g' can remain int as it stores node indices
vector<vector<long long>>dp; // 'dp' must be long long to prevent overflow
// OR use 'll' if you prefer: vector<vector<ll>>dp;

void dfs(int v,int p=-1){
    for(int u:g[v]){
        if(u!=p){
            dfs(u,v);
            dp[v][0]+=max(dp[u][0]+abs(l[u]-l[v]),dp[u][1]+abs(r[u]-l[v]));
            dp[v][1]+=max(dp[u][0]+abs(l[u]-r[v]),dp[u][1]+abs(r[u]-r[v]));
        }
    }
}
void solve(){
cin>>n;
l.clear(),r.clear(),g.clear(),dp.clear();
l.resize(n),r.resize(n),g.resize(n);
dp.resize(n,vector<long long>(2));
for(int i=0;i<n;i++)cin>>l[i]>>r[i];
for(int i=0;i<n-1;i++){
    int v,u;cin>>v>>u;
    g[--v].push_back(--u);g[u].push_back(v);
}
dfs(0);
cout<<max(dp[0][0],dp[0][1]);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
  int t;cin>>t;
  while(t--){
    solve();
    cout<<endl;
  }
}
